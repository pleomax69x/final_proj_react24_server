{
  "openapi": "3.0.1",
  "info": {
    "version": "1.0.0",
    "title": "Planning app",
    "description": "Planning app was made by GoIT \\#24 students",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "https://planning-app1.herokuapp.com/"
    },
    {
      "url": "http://localhost:5000/"
    }
  ],
  "tags": [
    {
      "name": "Auth"
    },
    {
      "name": "Additional options"
    },
    {
      "name": "Projects"
    },
    {
      "name": "Sprints"
    },
    {
      "name": "Tasks"
    },
    {
      "name": "Teammates"
    }
  ],
  "paths": {
    "/registration": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [],
        "security": [],
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (Invalid request body)",
            "content": {}
          },
          "409": {
            "description": "Conflict (Email is in use)",
            "content": {}
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "parameters": [],
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "description": "Login's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (Invalid request body)",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (Email or password is wrong)",
            "content": {}
          }
        }
      }
    },
    "/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User logout, send none content!",
        "parameters": [],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "Successful logout (No content)"
          },
          "401": {
            "description": "Unauthorized (Not authorized)",
            "content": {}
          }
        }
      }
    },
    "/": {
      "get": {
        "tags": ["Auth"],
        "summary": "Get current user",
        "parameters": [],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Not authorized)"
          }
        }
      }
    },
    "/deleteProjects": {
      "delete": {
        "tags": ["Additional options"],
        "summary": "Delete all projects",
        "parameters": [],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden (only owner can delete the projects)"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error (projects was not deleted)"
          }
        }
      }
    },
    "/deleteSprints/{projectId}": {
      "delete": {
        "tags": ["Additional options"],
        "summary": "Delete all sprints and tasks in project",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden (only project owner can delete sprints)"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error (sprints was not deleted)"
          }
        }
      }
    },
    "/projects": {
      "post": {
        "tags": ["Projects"],
        "summary": "Create a project",
        "parameters": [],
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "description": "Project object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectsRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (Validation Error)",
            "content": {}
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "500": {
            "description": "Internal server error (project was not created)",
            "content": {}
          }
        }
      },
      "get": {
        "tags": ["Projects"],
        "summary": "Get all projects",
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sorting. First created project will shown first",
            "example": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortByDesc",
            "in": "query",
            "description": "Sorting. Last created project will shown first",
            "example": "createdAt",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter. Select only the required fields",
            "example": "name|description",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          }
        }
      }
    },
    "/projects/{projectId}": {
      "delete": {
        "tags": ["Projects"],
        "summary": "Delete a project (also sprints and tasks associated with it)",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden (only owner can delete the project)"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error (project was not deleted)"
          }
        }
      },
      "patch": {
        "tags": ["Projects"],
        "summary": "Rename project",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "description": "Project object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden (only owner can change the project name)"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error (project name was not changed)"
          }
        }
      }
    },
    "/sprints/{projectId}": {
      "post": {
        "tags": ["Sprints"],
        "summary": "Create a sprint",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "description": "Sprint object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SprintsRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SprintsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (Validation Error)"
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden (only project owner can add sprint)"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "get": {
        "tags": ["Sprints"],
        "summary": "Get all sprints",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SprintsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden (only teammate have access)"
          },
          "404": {
            "description": "Not found (project was not found)"
          }
        }
      }
    },
    "/sprints/{sprintId}": {
      "delete": {
        "tags": ["Sprints"],
        "summary": "Delete a sprint (and tasks associated with it)",
        "parameters": [
          {
            "name": "sprintId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success (sprint was deleted)"
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden (only project owner can delete sprint)"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error (sprint was not deleted)"
          }
        }
      },
      "patch": {
        "tags": ["Sprints"],
        "summary": "Rename sprint",
        "parameters": [
          {
            "name": "sprintId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "description": "Sprint object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SprintsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SprintsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden (only project owner can change title)"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error (title was not changed)"
          }
        }
      }
    },
    "/tasks/{sprintId}": {
      "post": {
        "tags": ["Tasks"],
        "summary": "Create a task",
        "parameters": [
          {
            "name": "sprintId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "description": "Task object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TasksRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TasksResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (Validation Error)"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found (sprint was not found)"
          },
          "500": {
            "description": "Internal server error (task was not created)"
          }
        }
      },
      "get": {
        "tags": ["Tasks"],
        "summary": "Get all tasks",
        "parameters": [
          {
            "name": "sprintId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TasksResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found (sprint was not found)"
          }
        }
      }
    },
    "/tasks/{taskId}": {
      "delete": {
        "tags": ["Tasks"],
        "summary": "Delete a task",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success (task was deleted)"
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden (only project owner can delete task)"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error (task was not deleted)"
          }
        }
      },
      "patch": {
        "tags": ["Tasks"],
        "summary": "Update hours per day in task",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "description": "Task object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HoursPerDay"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TasksResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/tasks/scheduledHours/{taskId}": {
      "patch": {
        "tags": ["Tasks"],
        "summary": "Update scheduled hours in task",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "description": "Task object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TasksRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TasksResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/teammates/{projectId}": {
      "post": {
        "tags": ["Teammates"],
        "summary": "Add teammate to project",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "description": "Teammate object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeammatesRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeammatesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (Validation Error)"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "Conflict (user already in project)"
          }
        }
      },
      "delete": {
        "tags": ["Teammates"],
        "summary": "Delete teammate from project",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success (Teammate was deleted)"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "minLength": 5,
            "maxLength": 30,
            "description": "User email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "maxLength": 30,
            "description": "User password"
          }
        },
        "example": {
          "email": "yourmail@gmail.com",
          "password": "qweWerty"
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "example": {
          "status": "Created",
          "code": 201,
          "data": {
            "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwZGMzNTJlM2E4ZTc0MDAxYzdkMDVmMyIsImlhdCI6MTYyNTA0NDI3MCwiZXhwIjoxNjI1MTMwNjcwfQ.AKHW4VtuVt9ibrMNXLrS32j2hjrTcwF2l60jNFOuOYA",
            "user": {
              "email": "yourmail@gmail.com",
              "_id": "60dc352e3a8e74001c7d05f3"
            }
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User password"
          }
        },
        "example": {
          "email": "yourmail@gmail.com",
          "password": "qweWerty"
        }
      },
      "LoginResponse": {
        "type": "object",
        "example": {
          "status": "success",
          "code": 200,
          "data": {
            "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwZGMzNTJlM2E4ZTc0MDAxYzdkMDVmMyIsImlhdCI6MTYyNTA0NDI3MCwiZXhwIjoxNjI1MTMwNjcwfQ.AKHW4VtuVt9ibrMNXLrS32j2hjrTcwF2l60jNFOuOYA",
            "user": {
              "email": "yourmail@gmail.com",
              "_id": "60dc352e3a8e74001c7d05f3"
            }
          }
        }
      },
      "CurrentResponse": {
        "type": "object",
        "example": {
          "status": "success",
          "code": 200,
          "data": {
            "email": "yourmail@gmail.com"
          }
        }
      },
      "ProjectsRequest": {
        "type": "object",
        "required": ["name", "description"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Project name",
            "minLength": 3,
            "maxLength": 30
          },
          "description": {
            "type": "string",
            "description": "Project description",
            "minLength": 5,
            "maxLength": 100
          }
        },
        "example": {
          "name": "Project1",
          "description": "description"
        }
      },
      "ProjectsResponse": {
        "type": "object",
        "required": ["name", "description"],
        "properties": {
          "_id": {
            "type": "string",
            "format": "ObjectId",
            "description": "auto generated id of the project"
          },
          "name": {
            "type": "string",
            "description": "Project name",
            "minLength": 3,
            "maxLength": 30
          },
          "description": {
            "type": "string",
            "description": "Project description",
            "minLength": 5,
            "maxLength": 100
          },
          "owner": {
            "type": "string",
            "format": "ObjectId",
            "description": "Ref to user (Owner of the project)"
          },
          "teammates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeammatesResponse"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "ISODate",
            "description": "When project was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "ISODate",
            "description": "When project was updated"
          }
        },
        "example": {
          "project": {
            "teammates": [
              {
                "id": "60dc352e3a8e74001c7d05f3",
                "email": "yourmail@gmail.com"
              }
            ],
            "_id": "60dc352e3a8e74001c7d05cr",
            "name": "Project1",
            "description": "description",
            "owner": "60dc352e3a8e74001c7d05f3",
            "createdAt": "2021-07-04T17:37:30.810Z",
            "updatedAt": "2021-07-04T17:37:30.810Z"
          }
        }
      },
      "SprintsRequest": {
        "type": "object",
        "required": ["title", "date", "duration", "listOfDates"],
        "properties": {
          "title": {
            "type": "string",
            "description": "Sprint title"
          },
          "date": {
            "type": "string",
            "description": "Sprint start date"
          },
          "duration": {
            "type": "number",
            "description": "Duration of the sprint"
          },
          "listOfDates": {
            "type": "array",
            "description": "List of dates come from front-end",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "title": "Sprint1",
          "date": "2021-07-01",
          "duration": 3,
          "listOfDates": ["2021-07-01", "2021-07-02", "2021-07-03"]
        }
      },
      "SprintsResponse": {
        "type": "object",
        "required": [
          "title",
          "date",
          "duration",
          "listOfDates",
          "projectId",
          "projectOwnerId"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "ObjectId",
            "description": "auto-generated id"
          },
          "title": {
            "type": "string",
            "description": "Sprint title"
          },
          "date": {
            "type": "string",
            "description": "Sprint start date"
          },
          "duration": {
            "type": "number",
            "description": "Duration of the sprint"
          },
          "projectId": {
            "type": "string",
            "format": "ObjectId",
            "description": "Ref to project"
          },
          "listOfDates": {
            "type": "array",
            "description": "List of dates come from front-end",
            "items": {
              "type": "string"
            }
          },
          "projectOwnerId": {
            "type": "string",
            "format": "ObjectId",
            "description": "Ref to user"
          },
          "createdAt": {
            "type": "string",
            "format": "ISODate",
            "description": "When sprint was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "ISODate",
            "description": "When sprint was updated"
          }
        },
        "example": {
          "_id": "60dc352e3a8e74001c7d06er",
          "title": "Sprint1",
          "date": "2021-07-01",
          "duration": "3",
          "listOfDates": ["2021-07-01", "2021-07-02", "2021-07-03"],
          "projectId": "60e576129cd95b3c7833cd2w",
          "projectOwnerId": "60dc352e3a8e74001c7d05f3",
          "createdAt": "2021-07-05T14:59:56.691Z",
          "updatedAt": "2021-07-05T14:59:56.691Z"
        }
      },
      "TasksRequest": {
        "type": "object",
        "required": ["title", "scheduledHours"],
        "properties": {
          "title": {
            "type": "string",
            "description": "Sprint title"
          },
          "scheduledHours": {
            "type": "number",
            "default": 2,
            "description": "Scheduled hours to complete task"
          },
          "hoursPerDay": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HoursPerDay"
            },
            "description": "Hours per day spent on task"
          },
          "totalHours": {
            "type": "number",
            "default": 0,
            "description": "Total hours spent on tasks"
          }
        },
        "example": {
          "scheduledHours": 5.5
        }
      },
      "TasksResponse": {
        "type": "object",
        "required": ["title", "scheduledHours", "sprintId", "projectOwnerId"],
        "properties": {
          "title": {
            "type": "string",
            "description": "Sprint title"
          },
          "scheduledHours": {
            "type": "number",
            "default": 2,
            "description": "Scheduled hours to complete task"
          },
          "hoursPerDay": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HoursPerDay"
            },
            "description": "Hours per day spent on task"
          },
          "totalHours": {
            "type": "number",
            "default": 0,
            "description": "Total hours spent on tasks"
          },
          "sprintId": {
            "type": "string",
            "format": "ObjectId",
            "description": "Ref to sprint"
          },
          "projectOwnerId": {
            "type": "string",
            "format": "ObjectId",
            "description": "Ref to user"
          },
          "createdAt": {
            "type": "string",
            "format": "ISODate",
            "description": "When task was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "ISODate",
            "description": "When task was updated"
          }
        },
        "example": {
          "_id": "60e323f8ca948f25ccdf9ab3",
          "scheduledHours": 5,
          "hoursPerDay": [
            {
              "date": "2021-07-01",
              "hours": 0
            },
            {
              "date": "2021-07-02",
              "hours": 0
            },
            {
              "date": "2021-07-03",
              "hours": 0
            }
          ],
          "totalHours": 0,
          "title": "Task1",
          "sprintId": "60e31e6cca948f25ccdf9aab",
          "projectOwnerId": "60dee04fd2bc8a42b4b7dc6b",
          "createdAt": "2021-07-05T15:23:36.653Z",
          "updatedAt": "2021-07-05T15:23:36.653Z"
        }
      },
      "HoursPerDay": {
        "type": "object",
        "description": "auto-generated object, filled with data from sprints (listOfDates)",
        "required": ["date", "hours"],
        "properties": {
          "date": {
            "type": "string",
            "description": "Date of sprint day"
          },
          "hours": {
            "type": "number",
            "description": "Hours spent on task"
          }
        },
        "example": {
          "date": "2021-07-07",
          "hours": 0
        }
      },
      "TeammatesRequest": {
        "type": "object",
        "required": ["email"],
        "properties": {
          "email": {
            "type": "string",
            "description": "teammate email"
          }
        },
        "example": {
          "email": "yourmail@gmail.com"
        }
      },
      "TeammatesResponse": {
        "type": "object",
        "required": ["id", "email"],
        "properties": {
          "id": {
            "type": "string",
            "description": "teammate id"
          },
          "email": {
            "type": "string",
            "description": "teammate email"
          }
        },
        "example": {
          "user": {
            "id": "60dc352e3a8e74001c7d05f3",
            "email": "yourmail@gmail.com"
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
